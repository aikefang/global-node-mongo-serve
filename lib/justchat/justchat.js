//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./justchat_types');
//HELPER FUNCTIONS AND STRUCTURES

var justchat_switch_key_args = function(args) {
  this.jsonstr = null;
  if (args) {
    if (args.jsonstr !== undefined && args.jsonstr !== null) {
      this.jsonstr = args.jsonstr;
    }
  }
};
justchat_switch_key_args.prototype = {};
justchat_switch_key_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonstr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_switch_key_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_switch_key_args');
  if (this.jsonstr !== null && this.jsonstr !== undefined) {
    output.writeFieldBegin('jsonstr', Thrift.Type.STRING, 1);
    output.writeString(this.jsonstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_switch_key_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_switch_key_result.prototype = {};
justchat_switch_key_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_switch_key_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_switch_key_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_create_role_args = function(args) {
  this.jsonstr = null;
  if (args) {
    if (args.jsonstr !== undefined && args.jsonstr !== null) {
      this.jsonstr = args.jsonstr;
    }
  }
};
justchat_create_role_args.prototype = {};
justchat_create_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonstr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_create_role_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_create_role_args');
  if (this.jsonstr !== null && this.jsonstr !== undefined) {
    output.writeFieldBegin('jsonstr', Thrift.Type.STRING, 1);
    output.writeString(this.jsonstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_create_role_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_create_role_result.prototype = {};
justchat_create_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_create_role_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_create_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_update_role_args = function(args) {
  this.jsonstr = null;
  if (args) {
    if (args.jsonstr !== undefined && args.jsonstr !== null) {
      this.jsonstr = args.jsonstr;
    }
  }
};
justchat_update_role_args.prototype = {};
justchat_update_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonstr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_update_role_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_update_role_args');
  if (this.jsonstr !== null && this.jsonstr !== undefined) {
    output.writeFieldBegin('jsonstr', Thrift.Type.STRING, 1);
    output.writeString(this.jsonstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_update_role_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_update_role_result.prototype = {};
justchat_update_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_update_role_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_update_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_delect_role_args = function(args) {
  this.roleid = null;
  if (args) {
    if (args.roleid !== undefined && args.roleid !== null) {
      this.roleid = args.roleid;
    }
  }
};
justchat_delect_role_args.prototype = {};
justchat_delect_role_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_delect_role_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_delect_role_args');
  if (this.roleid !== null && this.roleid !== undefined) {
    output.writeFieldBegin('roleid', Thrift.Type.STRING, 1);
    output.writeString(this.roleid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_delect_role_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_delect_role_result.prototype = {};
justchat_delect_role_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_delect_role_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_delect_role_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_prologue_args = function(args) {
  this.jsonstr = null;
  if (args) {
    if (args.jsonstr !== undefined && args.jsonstr !== null) {
      this.jsonstr = args.jsonstr;
    }
  }
};
justchat_get_prologue_args.prototype = {};
justchat_get_prologue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonstr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_prologue_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_prologue_args');
  if (this.jsonstr !== null && this.jsonstr !== undefined) {
    output.writeFieldBegin('jsonstr', Thrift.Type.STRING, 1);
    output.writeString(this.jsonstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_prologue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_get_prologue_result.prototype = {};
justchat_get_prologue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_prologue_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_prologue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_roledata_args = function(args) {
  this.roleid = null;
  if (args) {
    if (args.roleid !== undefined && args.roleid !== null) {
      this.roleid = args.roleid;
    }
  }
};
justchat_get_roledata_args.prototype = {};
justchat_get_roledata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_roledata_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_roledata_args');
  if (this.roleid !== null && this.roleid !== undefined) {
    output.writeFieldBegin('roleid', Thrift.Type.STRING, 1);
    output.writeString(this.roleid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_roledata_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_get_roledata_result.prototype = {};
justchat_get_roledata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_roledata_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_roledata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_create_session_args = function(args) {
  this.jsonstr = null;
  if (args) {
    if (args.jsonstr !== undefined && args.jsonstr !== null) {
      this.jsonstr = args.jsonstr;
    }
  }
};
justchat_create_session_args.prototype = {};
justchat_create_session_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonstr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_create_session_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_create_session_args');
  if (this.jsonstr !== null && this.jsonstr !== undefined) {
    output.writeFieldBegin('jsonstr', Thrift.Type.STRING, 1);
    output.writeString(this.jsonstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_create_session_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_create_session_result.prototype = {};
justchat_create_session_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_create_session_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_create_session_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_reset_session_args = function(args) {
  this.sessionid = null;
  if (args) {
    if (args.sessionid !== undefined && args.sessionid !== null) {
      this.sessionid = args.sessionid;
    }
  }
};
justchat_reset_session_args.prototype = {};
justchat_reset_session_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_reset_session_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_reset_session_args');
  if (this.sessionid !== null && this.sessionid !== undefined) {
    output.writeFieldBegin('sessionid', Thrift.Type.STRING, 1);
    output.writeString(this.sessionid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_reset_session_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_reset_session_result.prototype = {};
justchat_reset_session_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_reset_session_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_reset_session_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_delect_session_args = function(args) {
  this.sessionid = null;
  if (args) {
    if (args.sessionid !== undefined && args.sessionid !== null) {
      this.sessionid = args.sessionid;
    }
  }
};
justchat_delect_session_args.prototype = {};
justchat_delect_session_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_delect_session_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_delect_session_args');
  if (this.sessionid !== null && this.sessionid !== undefined) {
    output.writeFieldBegin('sessionid', Thrift.Type.STRING, 1);
    output.writeString(this.sessionid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_delect_session_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_delect_session_result.prototype = {};
justchat_delect_session_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_delect_session_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_delect_session_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_roleid_args = function(args) {
  this.sessionid = null;
  if (args) {
    if (args.sessionid !== undefined && args.sessionid !== null) {
      this.sessionid = args.sessionid;
    }
  }
};
justchat_get_roleid_args.prototype = {};
justchat_get_roleid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_roleid_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_roleid_args');
  if (this.sessionid !== null && this.sessionid !== undefined) {
    output.writeFieldBegin('sessionid', Thrift.Type.STRING, 1);
    output.writeString(this.sessionid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_roleid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_get_roleid_result.prototype = {};
justchat_get_roleid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_roleid_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_roleid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_answer_args = function(args) {
  this.jsonstr = null;
  if (args) {
    if (args.jsonstr !== undefined && args.jsonstr !== null) {
      this.jsonstr = args.jsonstr;
    }
  }
};
justchat_get_answer_args.prototype = {};
justchat_get_answer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jsonstr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_answer_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_answer_args');
  if (this.jsonstr !== null && this.jsonstr !== undefined) {
    output.writeFieldBegin('jsonstr', Thrift.Type.STRING, 1);
    output.writeString(this.jsonstr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_answer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_get_answer_result.prototype = {};
justchat_get_answer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_answer_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_answer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_history_args = function(args) {
  this.sessionid = null;
  if (args) {
    if (args.sessionid !== undefined && args.sessionid !== null) {
      this.sessionid = args.sessionid;
    }
  }
};
justchat_get_history_args.prototype = {};
justchat_get_history_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_history_args.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_history_args');
  if (this.sessionid !== null && this.sessionid !== undefined) {
    output.writeFieldBegin('sessionid', Thrift.Type.STRING, 1);
    output.writeString(this.sessionid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchat_get_history_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
justchat_get_history_result.prototype = {};
justchat_get_history_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

justchat_get_history_result.prototype.write = function(output) {
  output.writeStructBegin('justchat_get_history_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var justchatClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
justchatClient.prototype = {};
justchatClient.prototype.seqid = function() { return this._seqid; };
justchatClient.prototype.new_seqid = function() { return this._seqid += 1; };

justchatClient.prototype.switch_key = function(jsonstr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_switch_key(jsonstr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_switch_key(jsonstr);
  }
};

justchatClient.prototype.send_switch_key = function(jsonstr) {
  var output = new this.pClass(this.output);
  var params = {
    jsonstr: jsonstr
  };
  var args = new justchat_switch_key_args(params);
  try {
    output.writeMessageBegin('switch_key', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_switch_key = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_switch_key_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('switch_key failed: unknown result');
};

justchatClient.prototype.create_role = function(jsonstr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_role(jsonstr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_role(jsonstr);
  }
};

justchatClient.prototype.send_create_role = function(jsonstr) {
  var output = new this.pClass(this.output);
  var params = {
    jsonstr: jsonstr
  };
  var args = new justchat_create_role_args(params);
  try {
    output.writeMessageBegin('create_role', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_create_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_create_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_role failed: unknown result');
};

justchatClient.prototype.update_role = function(jsonstr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_role(jsonstr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_role(jsonstr);
  }
};

justchatClient.prototype.send_update_role = function(jsonstr) {
  var output = new this.pClass(this.output);
  var params = {
    jsonstr: jsonstr
  };
  var args = new justchat_update_role_args(params);
  try {
    output.writeMessageBegin('update_role', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_update_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_update_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_role failed: unknown result');
};

justchatClient.prototype.delect_role = function(roleid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delect_role(roleid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delect_role(roleid);
  }
};

justchatClient.prototype.send_delect_role = function(roleid) {
  var output = new this.pClass(this.output);
  var params = {
    roleid: roleid
  };
  var args = new justchat_delect_role_args(params);
  try {
    output.writeMessageBegin('delect_role', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_delect_role = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_delect_role_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delect_role failed: unknown result');
};

justchatClient.prototype.get_prologue = function(jsonstr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_prologue(jsonstr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_prologue(jsonstr);
  }
};

justchatClient.prototype.send_get_prologue = function(jsonstr) {
  var output = new this.pClass(this.output);
  var params = {
    jsonstr: jsonstr
  };
  var args = new justchat_get_prologue_args(params);
  try {
    output.writeMessageBegin('get_prologue', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_get_prologue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_get_prologue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_prologue failed: unknown result');
};

justchatClient.prototype.get_roledata = function(roleid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_roledata(roleid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_roledata(roleid);
  }
};

justchatClient.prototype.send_get_roledata = function(roleid) {
  var output = new this.pClass(this.output);
  var params = {
    roleid: roleid
  };
  var args = new justchat_get_roledata_args(params);
  try {
    output.writeMessageBegin('get_roledata', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_get_roledata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_get_roledata_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_roledata failed: unknown result');
};

justchatClient.prototype.create_session = function(jsonstr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_session(jsonstr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_session(jsonstr);
  }
};

justchatClient.prototype.send_create_session = function(jsonstr) {
  var output = new this.pClass(this.output);
  var params = {
    jsonstr: jsonstr
  };
  var args = new justchat_create_session_args(params);
  try {
    output.writeMessageBegin('create_session', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_create_session = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_create_session_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_session failed: unknown result');
};

justchatClient.prototype.reset_session = function(sessionid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reset_session(sessionid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reset_session(sessionid);
  }
};

justchatClient.prototype.send_reset_session = function(sessionid) {
  var output = new this.pClass(this.output);
  var params = {
    sessionid: sessionid
  };
  var args = new justchat_reset_session_args(params);
  try {
    output.writeMessageBegin('reset_session', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_reset_session = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_reset_session_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reset_session failed: unknown result');
};

justchatClient.prototype.delect_session = function(sessionid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delect_session(sessionid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delect_session(sessionid);
  }
};

justchatClient.prototype.send_delect_session = function(sessionid) {
  var output = new this.pClass(this.output);
  var params = {
    sessionid: sessionid
  };
  var args = new justchat_delect_session_args(params);
  try {
    output.writeMessageBegin('delect_session', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_delect_session = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_delect_session_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delect_session failed: unknown result');
};

justchatClient.prototype.get_roleid = function(sessionid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_roleid(sessionid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_roleid(sessionid);
  }
};

justchatClient.prototype.send_get_roleid = function(sessionid) {
  var output = new this.pClass(this.output);
  var params = {
    sessionid: sessionid
  };
  var args = new justchat_get_roleid_args(params);
  try {
    output.writeMessageBegin('get_roleid', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_get_roleid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_get_roleid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_roleid failed: unknown result');
};

justchatClient.prototype.get_answer = function(jsonstr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_answer(jsonstr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_answer(jsonstr);
  }
};

justchatClient.prototype.send_get_answer = function(jsonstr) {
  var output = new this.pClass(this.output);
  var params = {
    jsonstr: jsonstr
  };
  var args = new justchat_get_answer_args(params);
  try {
    output.writeMessageBegin('get_answer', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_get_answer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_get_answer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_answer failed: unknown result');
};

justchatClient.prototype.get_history = function(sessionid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_history(sessionid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_history(sessionid);
  }
};

justchatClient.prototype.send_get_history = function(sessionid) {
  var output = new this.pClass(this.output);
  var params = {
    sessionid: sessionid
  };
  var args = new justchat_get_history_args(params);
  try {
    output.writeMessageBegin('get_history', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

justchatClient.prototype.recv_get_history = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new justchat_get_history_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_history failed: unknown result');
};
var justchatProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
justchatProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
justchatProcessor.prototype.process_switch_key = function(seqid, input, output) {
  var args = new justchat_switch_key_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.switch_key.length === 1) {
    Q.fcall(this._handler.switch_key.bind(this._handler),
      args.jsonstr
    ).then(function(result) {
      var result_obj = new justchat_switch_key_result({success: result});
      output.writeMessageBegin("switch_key", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("switch_key", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.switch_key(args.jsonstr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_switch_key_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("switch_key", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("switch_key", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_create_role = function(seqid, input, output) {
  var args = new justchat_create_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_role.length === 1) {
    Q.fcall(this._handler.create_role.bind(this._handler),
      args.jsonstr
    ).then(function(result) {
      var result_obj = new justchat_create_role_result({success: result});
      output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("create_role", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_role(args.jsonstr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_create_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_update_role = function(seqid, input, output) {
  var args = new justchat_update_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_role.length === 1) {
    Q.fcall(this._handler.update_role.bind(this._handler),
      args.jsonstr
    ).then(function(result) {
      var result_obj = new justchat_update_role_result({success: result});
      output.writeMessageBegin("update_role", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("update_role", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_role(args.jsonstr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_update_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_delect_role = function(seqid, input, output) {
  var args = new justchat_delect_role_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delect_role.length === 1) {
    Q.fcall(this._handler.delect_role.bind(this._handler),
      args.roleid
    ).then(function(result) {
      var result_obj = new justchat_delect_role_result({success: result});
      output.writeMessageBegin("delect_role", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("delect_role", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.delect_role(args.roleid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_delect_role_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delect_role", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delect_role", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_get_prologue = function(seqid, input, output) {
  var args = new justchat_get_prologue_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_prologue.length === 1) {
    Q.fcall(this._handler.get_prologue.bind(this._handler),
      args.jsonstr
    ).then(function(result) {
      var result_obj = new justchat_get_prologue_result({success: result});
      output.writeMessageBegin("get_prologue", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_prologue", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_prologue(args.jsonstr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_get_prologue_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_prologue", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_prologue", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_get_roledata = function(seqid, input, output) {
  var args = new justchat_get_roledata_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_roledata.length === 1) {
    Q.fcall(this._handler.get_roledata.bind(this._handler),
      args.roleid
    ).then(function(result) {
      var result_obj = new justchat_get_roledata_result({success: result});
      output.writeMessageBegin("get_roledata", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_roledata", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_roledata(args.roleid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_get_roledata_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_roledata", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_roledata", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_create_session = function(seqid, input, output) {
  var args = new justchat_create_session_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_session.length === 1) {
    Q.fcall(this._handler.create_session.bind(this._handler),
      args.jsonstr
    ).then(function(result) {
      var result_obj = new justchat_create_session_result({success: result});
      output.writeMessageBegin("create_session", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("create_session", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_session(args.jsonstr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_create_session_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_session", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_session", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_reset_session = function(seqid, input, output) {
  var args = new justchat_reset_session_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reset_session.length === 1) {
    Q.fcall(this._handler.reset_session.bind(this._handler),
      args.sessionid
    ).then(function(result) {
      var result_obj = new justchat_reset_session_result({success: result});
      output.writeMessageBegin("reset_session", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("reset_session", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.reset_session(args.sessionid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_reset_session_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reset_session", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reset_session", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_delect_session = function(seqid, input, output) {
  var args = new justchat_delect_session_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delect_session.length === 1) {
    Q.fcall(this._handler.delect_session.bind(this._handler),
      args.sessionid
    ).then(function(result) {
      var result_obj = new justchat_delect_session_result({success: result});
      output.writeMessageBegin("delect_session", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("delect_session", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.delect_session(args.sessionid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_delect_session_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delect_session", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delect_session", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_get_roleid = function(seqid, input, output) {
  var args = new justchat_get_roleid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_roleid.length === 1) {
    Q.fcall(this._handler.get_roleid.bind(this._handler),
      args.sessionid
    ).then(function(result) {
      var result_obj = new justchat_get_roleid_result({success: result});
      output.writeMessageBegin("get_roleid", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_roleid", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_roleid(args.sessionid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_get_roleid_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_roleid", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_roleid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_get_answer = function(seqid, input, output) {
  var args = new justchat_get_answer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_answer.length === 1) {
    Q.fcall(this._handler.get_answer.bind(this._handler),
      args.jsonstr
    ).then(function(result) {
      var result_obj = new justchat_get_answer_result({success: result});
      output.writeMessageBegin("get_answer", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_answer", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_answer(args.jsonstr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_get_answer_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_answer", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_answer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
justchatProcessor.prototype.process_get_history = function(seqid, input, output) {
  var args = new justchat_get_history_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_history.length === 1) {
    Q.fcall(this._handler.get_history.bind(this._handler),
      args.sessionid
    ).then(function(result) {
      var result_obj = new justchat_get_history_result({success: result});
      output.writeMessageBegin("get_history", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_history", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_history(args.sessionid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new justchat_get_history_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_history", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_history", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
